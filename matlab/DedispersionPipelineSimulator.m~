function varargout = DedispersionPipelineSimulator(varargin)
% DEDISPERSIONPIPELINESIMULATOR M-file for DedispersionPipelineSimulator.fig
%      DEDISPERSIONPIPELINESIMULATOR, by itself, creates a new DEDISPERSIONPIPELINESIMULATOR or raises the existing
%      singleton*.
%
%      H = DEDISPERSIONPIPELINESIMULATOR returns the handle to a new DEDISPERSIONPIPELINESIMULATOR or the handle to
%      the existing singleton*.
%
%      DEDISPERSIONPIPELINESIMULATOR('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in DEDISPERSIONPIPELINESIMULATOR.M with the given input arguments.
%
%      DEDISPERSIONPIPELINESIMULATOR('Property','Value',...) creates a new DEDISPERSIONPIPELINESIMULATOR or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before DedispersionPipelineSimulator_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to DedispersionPipelineSimulator_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @DedispersionPipelineSimulator_OpeningFcn, ...
                   'gui_OutputFcn',  @DedispersionPipelineSimulator_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

% --- Executes just before DedispersionPipelineSimulator is made visible.
function DedispersionPipelineSimulator_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to DedispersionPipelinGeSimulator (see VARARGIN)

% Choose default command line output for DedispersionPipelineSimulator
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% Update path and appdata
addpath('data_generator','dedispersers','post_processors', 'rfi_filters', 'channelisers', 'utils');
setappdata(handles.generate_signal_button, 'signal_generated', 0);

% UIWAIT makes DedispersionPipelineSimulator wait for user response (see UIRESUME)
% uiwait(handles.main);


% --- Outputs from this function are returned to the command line.
function varargout = DedispersionPipelineSimulator_OutputFcn(hObject, eventdata, handles) 

% Get default command line output from handles structure
varargout{1} = handles.output;

% ----------------------- GLOBAL CALLBACKS --------------------------

% --------------------------------------------------------------------
function menu_open_Callback(hObject, eventdata, handles)

% Open an existing menu object


% --------------------------------------------------------------------
function menu_exit_Callback(hObject, eventdata, handles)

close()

% --------------------------------------------------------------------
function detach_axes_ClickedCallback(hObject, eventdata, handles)

figure; % Open a new figure with handle f1
h = gca();
copyobj(allchild(handles.axes2), h); % Copy axes object h into figure f1


% --- Executes on button press in plot1_button.
function plot1_button_Callback(hObject, eventdata, handles)
set(handles.panel_axes2, 'Visible', 'on');
set(handles.panel_axes3, 'Visible', 'off');


% --- Executes on button press in plot2_button.
function plot2_button_Callback(hObject, eventdata, handles)
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'on');

% ----------------------- ACTION CALLBACKS --------------------------

% --- Executes on button press in generate_signal_button.
function generate_signal_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Switching to "Generate Signal" tab');

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');
set(handles.generate_signal_panel, 'Visible', 'on');
set(handles.channelisation_panel, 'Visible', 'off');
set(handles.dedispersion_panel, 'Visible', 'of');
set(handles.post_processing_panel, 'Visible', 'off');
set(handles.rfi_mitigation_panel, 'Visible', 'off');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');

% If signal has been generated, plot
if getappdata(handles.generate_signal_button, 'signal_generated') == 1
    
    voltage = getappdata(handles.main, 'voltage');
    transients = getappdata(handles.main, 'transients');
    axes(handles.axes2);
    specgram(voltage);
    
    set(handles.plot1_button, 'Visible', 'on');
    plot1_button_Callback(hObject, eventdata, handles);

    % Display current transient
    setappdata(handles.generate_signal_button, 'signal_generated', 1);
    if size(transients,2) == 0
        set(handles.axes3, 'Visible', 'off');
    else
        set(handles.plot2_button, 'Visible', 'on');
        display_transient(handles, int32(getappdata(handles.main, 'curr_transient')));
    end
end

statusbar;


% --- Executes on button press in apply_bandpass_button.
function apply_bandpass_button_Callback(hObject, eventdata, handles)


% --- Executes on button press in channelisation_button.
function channelisation_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Switching to "Channelisation" tab');

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');
set(handles.generate_signal_panel, 'Visible', 'off');
set(handles.dedispersion_panel, 'Visible', 'of');
set(handles.channelisation_panel, 'Visible', 'on');
set(handles.post_processing_panel, 'Visible', 'off');
set(handles.rfi_mitigation_panel, 'Visible', 'off');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');

% If signal has already been channelised
if size(getappdata(handles.main, 'channelised_voltage'), 2) ~= 0
    channelised_voltage = getappdata(handles.main, 'channelised_voltage');
    axes(handles.axes2);
    imagesc(abs(channelised_voltage));
    
    set(handles.plot1_button, 'Visible', 'on');
    plot1_button_Callback(hObject, eventdata, handles);
end

statusbar;


% --- Executes on button press in rfi_mitigation_button.
function rfi_mitigation_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Switching to "RFI Mitigation" tab');

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');
set(handles.generate_signal_panel, 'Visible', 'off');
set(handles.dedispersion_panel, 'Visible', 'off');
set(handles.channelisation_panel, 'Visible', 'off');
set(handles.post_processing_panel, 'Visible', 'off');
set(handles.rfi_mitigation_panel, 'Visible', 'on');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');

% If signal has already been channelised
if size(getappdata(handles.main, 'channelised_voltage'), 2) ~= 0
    channelised_voltage = getappdata(handles.main, 'channelised_voltage');
    axes(handles.axes2);
    imagesc(abs(channelised_voltage));
    
    set(handles.plot1_button, 'Visible', 'on');
    plot1_button_Callback(hObject, eventdata, handles);
end

% If signal has already been rfi mitigated
if size(getappdata(handles.main, 'channel_power'), 2) ~= 0
    channel_power = getappdata(handles.main, 'channel_power');
    axes(handles.axes3);
    imagesc(channel_power);
    
    set(handles.plot2_button, 'Visible', 'on');
    plot1_button_Callback(hObject, eventdata, handles);
end

statusbar;


% --- Executes on button press in dedispersion_button.
function dedispersion_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Switching to "Dedispersion" tab');

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');
set(handles.dedispersion_panel, 'Visible', 'on');
set(handles.generate_signal_panel, 'Visible', 'off');
set(handles.channelisation_panel, 'Visible', 'off');
set(handles.post_processing_panel, 'Visible', 'off');
set(handles.rfi_mitigation_panel, 'Visible', 'off');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');

% If signal has been generated, plot
if size(getappdata(handles.main, 'dedispersed_series'), 2) ~= 0
    set(handles.brute_dedisp_plotter_panel, 'Visible', 'on');
    display_dedispersed_series(handles, getappdata(handles.brute_force_dedisp_panel, 'curr_dm_index'));
    
    set(handles.plot1_button, 'Visible', 'on');
    plot1_button_Callback(hObject, eventdata, handles);
else
    set(handles.brute_dedisp_plotter_panel, 'Visible', 'off');
end

statusbar;


% --- Executes on button press in post_processing_button.
function post_processing_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Switching to "Post-Processing" tab');

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');
set(handles.generate_signal_panel, 'Visible', 'off');
set(handles.dedispersion_panel, 'Visible', 'of');
set(handles.channelisation_panel, 'Visible', 'off');
set(handles.channelisation_panel, 'Visible', 'off');
set(handles.post_processing_panel, 'Visible', 'on');
set(handles.rfi_mitigation_panel, 'Visible', 'off');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');

% If signal has already been post_processed
%if size(getappdata(handles.main, 'channelised_voltage'), 2) ~= 0
%end

statusbar;

% ============================ TRANSIENT SECTION =========================

% --- Executes on button press in add_transient_button.

function reset_simulator(handles)

% Remove all app data
setappdata(handles.generate_signal_button, 'signal_generated', 0);
setappdata(handles.main, 'channelised_voltage', []);
setappdata(handles.main, 'dedispersed_series', []);
setappdata(handles.main, 'channel_power', []);
setappdata(handles.main, 'start_dm', 0);
setappdata(handles.main, 'dm_step', 0);
setappdata(handles.main, 'num_dms', 0);
setappdata(handles.brute_force_dedisp_panel, 'curr_dm_index', 0);

% Update UI
arrayfun(@cla,findall(0,'type','axes'))
set(handles.change_signal_button, 'Visible', 'off');
set(handles.apply_bandpass_button);
set(handles.channelisation_button, 'Enable', 'off');
set(handles.apply_bandpass_button, 'Enable', 'off');
set(handles.rfi_mitigation_button, 'Enable', 'off');
set(handles.post_processing_button, 'Enable', 'off');
set(handles.dedispersion_button, 'Enable', 'off');
set(handles.post_processing_button, 'Enable', 'off');
set(handles.rfi_mitigation_button, 'Enable', 'off');
set(handles.panel_axes2, 'Visible', 'off');
set(handles.panel_axes3, 'Visible', 'off');
set(handles.plot1_button, 'Visible', 'off');
set(handles.plot2_button, 'Visible', 'off');


function display_transient(handles, num)
% Display the required transiens

total = getappdata(handles.main, 'num_transients');

% Get transient data
transients = getappdata(handles.main, 'transients');
transient = transients(num);

% Set UI controls
total = getappdata(handles.main, 'num_transients');
set(handles.transient_info_panel, 'Title', strcat('Transient #', ...
                                     num2str(int32(transient.num))));
set(handles.number_transients_text, 'String', ...
     strcat(num2str(transient.num), ' of. ', num2str(total), ' transients'));
                                 
set(handles.dm_edit, 'String', num2str(transient.dm));
set(handles.snr_edit, 'String', num2str(transient.snr));
set(handles.dm_edit, 'Enable', 'inactive');
set(handles.snr_edit, 'Enable', 'inactive');

if transient.timestamp ~= -1
    set(handles.timestamp_checkbox, 'Value', 1.0);
    set(handles.timestamp_edit, 'Value', transient.timestamp);
else
    set(handles.timestamp_checkbox, 'Value', 0.0);
end
set(handles.timestamp_checkbox, 'Enable', 'inactive');
set(handles.timestamp_edit, 'Enable', 'inactive');

if transient.width ~= -1
    set(handles.width_checkbox, 'Value', 1.0);
    set(handles.width_edit, 'Value', transient.width);
else
    set(handles.width_checkbox, 'Value', 0.0);
end
set(handles.width_checkbox, 'Enable', 'inactive');
set(handles.width_edit, 'Enable', 'inactive');

if transient.period ~= -1
    set(handles.periodic_checkbox, 'Value', 1.0);
    set(handles.period_edit, 'Value', transient.period);
else
    set(handles.periodic_checkbox, 'Value', 0.0);
end
set(handles.periodic_checkbox, 'Enable', 'inactive');
set(handles.period_edit, 'Enable', 'inactive');

set(handles.scattering_checkbox, 'Value', transient.scatter);
set(handles.scattering_checkbox, 'Enable', 'inactive');

% Update directional UI controls
if num == 1 || total <= 1
    set(handles.left_transient_button, 'Enable', 'off')
end

if num == total || total <= 1
    set(handles.right_transient_button, 'Enable', 'off');
end
    
if total > 1 && num < total
    set(handles.right_transient_button, 'Enable', 'on');
end

if total > 1 && num > 1
    set(handles.left_transient_button, 'Enable', 'on');
end

% Plot transients
if getappdata(handles.generate_signal_button, 'signal_generated') == 1
    if size(transient.signal) ~= 0
        set(handles.axes3, 'Visible', 'on');
        axes(handles.axes3);
        specgram(transient.signal);
    end
end


function add_transient_button_Callback(hObject, eventdata, handles)

% Reset transient information
set(handles.transient_info_panel, 'Visible', 'on')

set(handles.timestamp_checkbox, 'Value', 0.0);
set(handles.width_checkbox, 'Value', 0.0);
set(handles.periodic_checkbox, 'Value', 0.0);
set(handles.scattering_checkbox, 'Value', 0.0);
set(handles.timestamp_checkbox, 'Enable', 'on');
set(handles.width_checkbox, 'Enable', 'on');
set(handles.scattering_checkbox, 'Enable', 'on');
set(handles.periodic_checkbox, 'Enable', 'on');

set(handles.dm_edit, 'String', '1');
set(handles.snr_edit, 'String' ,'1');
set(handles.timestamp_edit, 'String', '0');
set(handles.width_edit, 'String', '1');
set(handles.period_edit, 'String', '500');

set(handles.timestamp_edit, 'Visible', 'off');
set(handles.width_edit, 'Visible', 'off');
set(handles.period_edit, 'Visible', 'off');

set(handles.dm_edit, 'Enable', 'on');
set(handles.snr_edit, 'Enable', 'on');
set(handles.timestamp_edit, 'Enable', 'on');
set(handles.width_edit, 'Enable', 'on');
set(handles.period_edit, 'Enable', 'on');

set(handles.done_transient_button, 'Visible', 'on');
set(handles.transient_info_panel, 'Title', 'New Transient');

% --- Executes on button press in left_transient_button.
function left_transient_button_Callback(hObject, eventdata, handles)

curr = getappdata(handles.main, 'curr_transient');
num  = getappdata(handles.main, 'num_transients');

% Display the transient
curr = curr - 1;
display_transient(handles, curr);

% Set current transient
setappdata(handles.main, 'curr_transient', curr);

% --- Executes on button press in right_transient_button.
function right_transient_button_Callback(hObject, eventdata, handles)

curr = getappdata(handles.main, 'curr_transient');
num  = getappdata(handles.main, 'num_transients');

% Display the transient
curr = curr + 1;
display_transient(handles, curr);

% Set current transient
setappdata(handles.main, 'curr_transient', curr);

% --- Executes on button press in remove_transient_button.
function remove_transient_button_Callback(hObject, eventdata, handles)

transients     = getappdata(handles.main, 'transients');
num_transients = int32(getappdata(handles.main, 'num_transients'));
curr_transient = int32(getappdata(handles.main, 'curr_transient'));
transients(curr_transient) = [];

% Update transient data
for i=1:num_transients-1
    transients(i).num = i;
end

% Update app data
num_transients = num_transients - 1;
setappdata(handles.main, 'transients', transients);
setappdata(handles.main, 'num_transients', num_transients);

if num_transients == 0
    % Deleted last transient, reset UIs
    set(handles.transient_info_panel, 'Visible', 'off');
    set(handles.number_transients_text, 'String', strcat('0 of 0 transients'));
    set(handles.remove_transient_button, 'Enable', 'off');
    set(handles.left_transient_button, 'Enable', 'off');
    set(handles.right_transient_button, 'Enable', 'off');
    curr_transient = 0;
else
    % Display previous transient
    if curr_transient == num_transients + 1
        curr_transient = curr_transient - 1;
    end
   display_transient(handles, curr_transient);
end

% Set current transient
setappdata(handles.main, 'curr_transient', curr_transient);

% --- Executes on button press in done_transient_button.
function done_transient_button_Callback(hObject, eventdata, handles)

% Get transient parameters from UI controls
dm = str2double(get(handles.dm_edit, 'String'));
snr = str2double(get(handles.snr_edit, 'String'));

if get(handles.timestamp_checkbox, 'Value') == 1.0
    timestamp = str2double(get(handles.timestamp_edit, 'String'));
else
    timestamp = -1;
end

if get(handles.width_checkbox, 'Value') == 1.0
    width= str2double(get(handles.snr_edit, 'String'));
else
    width = -1;
end

if get(handles.periodic_checkbox, 'Value') == 1.0
    period = str2double(get(handles.period_edit, 'String'));
else
    period = -1;
end

scatter = get(handles.scattering_checkbox, 'Value');

% Set application globals
if size(getappdata(handles.main, 'num_transients')) == [0 0]
    setappdata(handles.main, 'num_transients', 0);
end

% Create transient struct and add to app data
transients = getappdata(handles.main, 'transients');
num        = int32(getappdata(handles.main, 'num_transients'));

transient = struct('dm', dm, 'snr', snr, 'timestamp', timestamp,   ...
                   'width', width, 'period', period, 'num', num+1, ...
                   'scatter', scatter, 'signal', []);
if size(transients) == [0 0']
    setappdata(handles.main, 'transients', [transient]);
else
    transients(num+1) = transient;
    setappdata(handles.main, 'transients', transients);
end

% Update app data
num = num + 1;
setappdata(handles.main, 'curr_transient', num);
setappdata(handles.main, 'num_transients', num);

% Update text
set(handles.number_transients_text, 'String', strcat(num2str(num), ...
                                    ' of. ', '', num2str(num), ' transients'));

% Set visibility buttons
if num > 1
    set(handles.left_transient_button, 'Enable', 'on');
end
set(handles.remove_transient_button, 'Enable', 'on');

set(handles.transient_info_panel, 'Title', strcat('Transient # ', num2str(num)));
set(hObject, 'Visible', 'off');

% Update transient display
display_transient(handles, num);

% --- Executes on button press in timestamp_checkbox.
function timestamp_checkbox_Callback(hObject, eventdata, handles)

if get(hObject, 'Value') == 0.0
    set(handles.timestamp_edit, 'Visible', 'off');
else
    set(handles.timestamp_edit, 'Visible', 'on');
end


% --- Executes on button press in width_checkbox.
function width_checkbox_Callback(hObject, eventdata, handles)

if get(hObject, 'Value') == 0.0
    set(handles.width_edit, 'Visible', 'off');
else
    set(handles.width_edit, 'Visible', 'on');
end


% --- Executes on button press in periodic_checkbox.
function periodic_checkbox_Callback(hObject, eventdata, handles)

if get(hObject, 'Value') == 0.0
    set(handles.period_edit, 'Visible', 'off');
    set(handles.timestamp_checkbox, 'Enable', 'on');
else
    set(handles.period_edit, 'Visible', 'on');
    set(handles.timestamp_checkbox, 'Enable', 'off');
    set(handles.timestamp_checkbox, 'Value', 0.0);
    set(handles.timestamp_edit, 'Visible', 'off');
end

% --- Executes on button press in generate_rfi_button.
function generate_rfi_button_Callback(hObject, eventdata, handles)
 
% Call generate RFI window
center_frequency = str2double(get(handles.fch_edit, 'String')) * 1e6;
bandwidth = str2double(get(handles.bw_edit, 'String')) * 1e6;
rfi = RFIForm(center_frequency, bandwidth);
setappdata(handles.main, 'rfi', rfi);


% --- Executes on button press in generate_button.
function generate_button_Callback(hObject, eventdata, handles)

% Clear plots
arrayfun(@cla,findall(0,'type','axes'))

% Collect observing frequency data and save to appdata
center_frequency = str2double(get(handles.fch_edit, 'String')) * 1e6;
bandwidth = str2double(get(handles.bw_edit, 'String')) * 1e6;
observation_length = str2double(get(handles.obs_len_edit, 'String'));
sampling_time = 1.0 / bandwidth; %;str2double(get(handles.sampling_time_edit, 'String')) * 1.0e-6;
sampling_rate = 1.0 / sampling_time;

obs_params = struct('center_frequency', center_frequency, ...
                    'bandwidth', bandwidth, ...
                    'number_channels', 1, ...
                    'channel_bandwidth', bandwidth, ...
                    'sampling_time', sampling_time, ...
                    'observation_length', observation_length);
setappdata(handles.main, 'observation_parameters', obs_params);

% RFI parameters gathered from RFI popup form
rfi = getappdata(handles.main, 'rfi');
if isstruct(rfi)
    chan_freqs = rfi.chan_freqs;
    chan_snr   = rfi.chan_snr;
    num_spikes = rfi.num_spikes;
    spike_snr  = rfi.spike_snr;
else
    chan_freqs = [];
    chan_snr   = [];
    num_spikes = 0;
end

% Clear existing plots
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');

% Start generating data... Start with raw voltage data
h = waitbar(0, 'Generating raw voltage stream');
voltage = generate_voltage_stream(obs_params);

% Generate required chirps
h = waitbar(0.1, h, 'Generating chirps');
transients = getappdata(handles.main, 'transients');

% Loop all transients
for i=1:size(transients, 2)
    
    % Generate chirp
    chirp = generate_chirp(obs_params, transients(i).dm, transients(i).snr);
    
    if transients(i).period ~= -1  % Periodic transient
        if transients(i).period < 0
            msgbox(['Invalid period for transient ' num2str(i)], ...
                    'Input Error', 'error');
            return;
        end
        
        period      = transients(i).period * 1e-3 * sampling_rate;
        first_pos   = int32(rand * (period - size(chirp, 2)));
        num_periods = ((observation_length * sampling_rate) - size(chirp,2)) / period;
        transients(i).timestamp = first_pos / sampling_rate * 1e3;

        % Insert full period in voltage stream
        for j=1:floor(num_periods)
            start_pos = first_pos + period * (j-1);
            end_pos   = first_pos + period * (j-1) + size(chirp, 2) - 1;
            voltage(start_pos:end_pos) = voltage(start_pos:end_pos) + chirp;
        end
        
        % Insert part of chirp in final period
        if (num_periods - floor(num_periods)) * period > first_pos
            start_pos = floor(num_periods) * period + first_pos;
            if size(chirp, 2) <= observation_length * sampling_rate - start_pos
                end_pos = start_pos + size(chirp, 2) - 1;
                voltage(start_pos:end_pos) = voltage(start_pos:end_pos) + chirp;
            else
                voltage(start_pos:end) = voltage(start_pos:end) + ...
                        chirp(1:observation_length * sampling_rate - start_pos);
            end
            
        end
        
    else     % Non-periodic transient
        if transients(i).timestamp ~= -1  % Timestamp set by user
            ts = transients(i).timestamp * 1e-3 * sampling_rate + 1;
        else                              % Random timestamp
            ts = int32(rand * (size(voltage,2) - size(chirp, 2)));
            transients(i).timestamp = ts / sampling_rate * 1e3;
        end
        
        % Add single chirp to voltage stream
        voltage(ts:ts+size(chirp,2)-1) = voltage(ts:ts+size(chirp,2)-1) + ...
                                         transients(i).snr * chirp;
    end
    
    transients(i).signal = chirp;
end

% Generate required channel-RFI signals
waitbar(0.6, h, 'Generating RFI');
for i=1:size(chan_freqs)
    voltage = generate_channel_rfi(voltage, obs_params, chan_freqs(i), chan_snr(i));
end

% Generate required RFI spikes
waitbar(0.8, h, 'Generating RFI');
if num_spikes > 0
    snr = normrnd(spike_snr(1), spike_snr(2), 1, num_spikes);
    width = abs(normrnd(10e-3 * sampling_rate, 1e-3 * sampling_rate, 1, num_spikes));
    for i=1:num_spikes
        t = int32(rand * (sampling_rate * observation_length - width(i)));
        voltage(t:t+width(i)-2) = snr(i) * voltage(t:t+width(i)-2); 
    end
end

% Save data to appdata
waitbar(0.9, h, 'Generating Plots');
setappdata(handles.main, 'voltage', voltage);
setappdata(handles.main, 'transients', transients);

% Done generating voltage, plot
axes(handles.axes2);
specgram(voltage);

% Display current transient
setappdata(handles.generate_signal_button, 'signal_generated', 1);
if size(transients,2) == 0
    set(handles.axes3, 'Visible', 'off');
else
    display_transient(handles, int32(getappdata(handles.main, 'curr_transient')));
end

set(handles.panel_axes2, 'Visible', 'on');
set(handles.plot1_button, 'Visible', 'on');

if size(transients, 2) > 0
    set(handles.plot2_button, 'Visible', 'on');
end

set(handles.channelisation_button, 'Enable', 'on');
set(handles.change_signal_button, 'Visible', 'on');
set(handles.generate_rfi_button, 'Visible', 'off');
set(handles.add_transient_button, 'Enable', 'off');
set(handles.remove_transient_button, 'Enable', 'off');

% Done
close(h)


% --- Executes on button press in change_signal_button.
function change_signal_button_Callback(hObject, eventdata, handles)

set(handles.add_transient_button, 'Enable', 'on');
if size(getappdata(handles.main, 'transients')) ~= 0
    set(handles.remove_transient_button, 'Enable', 'on');
end

% Reset simulator
reset_simulator(handles);
set(handles.generate_rfi_button, 'Visible', 'on');
generate_signal_button_Callback(hObject, eventdata, handles);

% =========================== CHANNELISATION =============================


% --- Executes on selection change in chan_technique_dropdown.
function chan_technique_dropdown_Callback(hObject, eventdata, handles)

% Get selected option
contents = cellstr(get(hObject, 'String'));
option = contents{get(hObject, 'Value')};

switch option;
    case 'FFT Channeliser'
    case 'PPF Channeliser'
        msgbox('PPF Channeliser not yet supported', 'Option Error', 'error');     
end


% --- Executes on button press in fft_channelise_button.
function fft_channelise_button_Callback(hObject, eventdata, handles)

num_chans = str2num(get(handles.fft_num_channels_edit, 'String'));

% Check if number of channels is a power of 2
[f,e] = log2(num_chans);
if f ~= 0.5
    msgbox('FFT Channeliser requires number of channels to be a power of 2', ...
           'Invalid Channelisation options', 'error');
       return;
end

statusbar(handles.main, 'Channelising...');

% Channelise
voltage = getappdata(handles.main, 'voltage');
params  = getappdata(handles.main, 'observation_parameters');
channelised_voltage = fft_channeliser(voltage, num_chans);

% Adjust parameters
params.number_channels   = num_chans;
params.sampling_time     = params.sampling_time * num_chans;
params.channel_bandwidth = params.bandwidth / num_chans;

% Plot channelised data
set(handles.axes2, 'Visible', 'on');
axes(handles.axes2);
imagesc(abs(channelised_voltage));

% Save to appdata
setappdata(handles.main, 'channelised_voltage', channelised_voltage);
setappdata(handles.main, 'observation_parameters', params);

% Update UI
set(handles.dedispersion_button, 'Enable', 'on');
set(handles.rfi_mitigation_button, 'Enable', 'on');
set(handles.panel_axes2, 'Visible', 'on');
set(handles.plot1_button, 'Visible', 'on');

statusbar;

% =========================== RFI MITIGATION ===========================

% --- Executes on button press in huber_normalisation_checkbox.
function huber_normalisation_checkbox_Callback(hObject, eventdata, handles)

if get(handles.huber_normalisation_checkbox, 'Value') == 1.0
    set(handles.huber_threshold_edit, 'Enable', 'on');
else
    set(handles.huber_threshold_edit, 'Enable', 'off');
end


% --- Executes on button press in apply_mitigation_button.
function apply_mitigation_button_Callback(hObject, eventdata, handles)

% Get data and convert to channelised power series
power_series = abs(getappdata(handles.main, 'channelised_voltage')).^2;

% If huber normalisation is checked, apply
if get(handles.huber_normalisation_checkbox, 'Value') == 1.0
    statusbar(handles.main, 'Applying Huber Filter ...');
    thresh = str2double(get(handles.huber_threshold_edit, 'String'));
    power_series = huber_normalisation(power_series, thresh);
    statusbar(handles.main, '');
end

% Display plot
axes(handles.axes3)
imagesc(power_series);
set(handles.panel_axes2, 'Visible', 'on');
set(handles.panel_axes3, 'Visible', 'on');
set(handles.plot1_button, 'Visible', 'on');
set(handles.plot2_button, 'Visible', 'on');
plot2_button_Callback(hObject, eventdata, handles)

% Set channelised voltage to null and set power series instead
setappdata(handles.main, 'channel_power', power_series);

% --- Executes on button press in clear_rfi_button.
function clear_rfi_button_Callback(hObject, eventdata, handles)

setappdata(handles.main, 'channel_power', []);

arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes3, 'Visible', 'off');
set(handles.axes2, 'Visible', 'on');
axes(handles.axes2);
imagesc(abs(getappdata(handles.main, 'channelised_voltage')));


% =========================== DEDISPERSION =============================

function display_dedispersed_series(handles, dm_index)

% Get app data
dedisped_data = getappdata(handles.main, 'dedispersed_series');
start_dm      = getappdata(handles.main, 'start_dm');
dm_step       = getappdata(handles.main, 'dm_step');
num_dms       = getappdata(handles.main, 'num_dms');

% Display the current dedispered_time_series
if 0 > dm_index > num_dms
    return;
end

% Reset plots
arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');

% If required, display dedispersed channelsif
if get(handles.display_dedisp_channelised_checkbox, 'Value') == 1.0
    % Calculate dedispersed channelised data
    params       = getappdata(handles.main, 'observation_parameters');
    power_series = abs(getappdata(handles.main, 'channelised_voltage').^2);
    dedisped     = brute_force_dedisperser( power_series, params, double(start_dm + dm_index * dm_step));
    
    % Plot
    set(handles.axes3, 'Visible', 'on');
    axes(handles.axes3);
    imagesc(dedisped);
end

% Plot dedispersed power series
set(handles.axes2, 'Visible', 'on');
axes(handles.axes2);
plot(dedisped_data(dm_index,:));

set(handles.plot1_button, 'Visible', 'on');
set(handles.plot2_button, 'Visible', 'off');
set(handles.panel

% Update directional UI controls
if dm_index == 1 || num_dms <= 1
    set(handles.brute_left_button, 'Enable', 'off')
end

if dm_index == num_dms || num_dms <= 1
    set(handles.brute_right_button, 'Enable', 'off');
end
    
if num_dms > 1 && dm_index < num_dms
    set(handles.brute_right_button, 'Enable', 'on');
end

if num_dms > 1 && dm_index > 1
    set(handles.brute_left_button, 'Enable', 'on');
end

text = ['DM ' num2str(dm_index) ' of ' num2str(num_dms) ' (' ...
        num2str(start_dm + dm_index * dm_step) ')' ];
set(handles.brute_curr_dm_text, 'String', text);

% Update appdata
setappdata(handles.brute_force_dedisp_panel, 'curr_dm_index', dm_index);

% --- Executes on button press in display_dedisp_channelised_checkbox.
function display_dedisp_channelised_checkbox_Callback(hObject, eventdata, handles)

display_dedispersed_series(handles, getappdata(handles.brute_force_dedisp_panel, 'curr_dm_index'));

% --- Executes on selection change in dedisp_technique_popup.
function dedisp_technique_popup_Callback(hObject, eventdata, handles)

% Get selected option
contents = cellstr(get(hObject, 'String'));
option = contents{get(hObject, 'Value')};

switch option;
    case 'Brute-Force Dedispersion'
end


% --- Executes on button press in brute_dedisp_button.
function brute_dedisp_button_Callback(hObject, eventdata, handles)

% Check if data is available
if size(getappdata(handles.main, 'channel_power'), 2)  ~= 0
    power_series = getappdata(handles.main, 'channel_power');
else
    if size(getappdata(handles.main, 'channelised_voltage'), 2) ~= 0
        power_series = abs(getappdata(handles.main, 'channelised_voltage')).^2;
    else
        msgbox('You need to channelised and optionally RFI mitigate data first', 'No data available' ,'error');
        return;
    end
end


% Reset brute-force dedispersion UI
set(handles.brute_dedisp_plotter_panel, 'Visible', 'off');
arrayfun(@cla,findall(0,'type','axes'))
set(handles.axes2, 'Visible', 'off');
set(handles.axes3, 'Visible', 'off');

% Get dedispersion parameters
start_dm = str2double(get(handles.brute_start_dm_edit, 'String'));
dm_step  = str2double(get(handles.brute_dm_step_edit, 'String'));
num_dms  = int32(str2double(get(handles.brute_num_dms_edit, 'String')));
params       = getappdata(handles.main, 'observation_parameters');

% Calculate number of samples for largest DM value
fch1 = (params.center_frequency + params.bandwidth / 2) * 1e-6;
foff = params.bandwidth * 1e-6;
delta_t = dispersion_delay( fch1 - foff, fch1, start_dm + dm_step * single(num_dms), params.sampling_time );
arr_len = int32(size(power_series,2) - delta_t);

% Perform brute-force dedispersion
h = waitbar(0, 'Performing brute-force dedispersion');
dedisped_data = zeros(num_dms, arr_len);
for i=1:num_dms
    waitbar(double(i)/double(num_dms), h,['Dedispersing ' num2str(i) ' of ' num2str(num_dms)]);
    dedisped = sum(brute_force_dedisperser( power_series, params, double(start_dm + dm_step * single(i-1.0)) ));
    dedisped_data(i,:) = dedisped(1,1:arr_len);
end
close(h);

% Save to appdata
setappdata(handles.main, 'dedispersed_series', dedisped_data);
setappdata(handles.main, 'start_dm', start_dm);
setappdata(handles.main, 'dm_step', dm_step);
setappdata(handles.main, 'num_dms', num_dms);
setappdata(handles.brute_force_dedisp_panel, 'curr_dm_index', 1);

% Display dedispersed time series
display_dedispersed_series(handles, 1);

% Update UI
set(handles.brute_dedisp_plotter_panel, 'Visible', 'on');
set(handles.brute_left_button, 'Enable', 'off');

if num_dms < 1
    set(handles.brute_right_button, 'Enable', 'off');    
end

% Update Global UI
set(handles.post_processing_button, 'Enable', 'on');


% --- Executes on button press in brute_left_button.
function brute_left_button_Callback(hObject, eventdata, handles)

display_dedispersed_series(handles, ...
    getappdata(handles.brute_force_dedisp_panel, 'curr_dm_index') - 1);


% --- Executes on button press in brute_right_button.
function brute_right_button_Callback(hObject, eventdata, handles)

display_dedispersed_series(handles, ...
    getappdata(handles.brute_force_dedisp_panel, 'curr_dm_index') + 1)


% =========================== POST_PROCESSING =============================

% --- Executes on selection change in post_technique_popup.
function post_technique_popup_Callback(hObject, eventdata, handles)

% Get selected option
contents = cellstr(get(hObject, 'String'));
option = contents{get(hObject, 'Value')};

switch option;
    case 'Threshold Detection'
end

% --- Executes on button press in median_filter_checkbox.
function median_filter_checkbox_Callback(hObject, eventdata, handles)

if get(handles.median_filter_checkbox, 'Value') == 1.0
    set(handles.median_filter_nbins, 'Enable', 'on');
else
    set(handles.median_filter_nbins, 'Enable', 'off');
end

% --- Executes on button press in apply_threshold_button.
function apply_threshold_button_Callback(hObject, eventdata, handles)

statusbar(handles.main, 'Post-porcessing using detection threshold');

% Get required data/parameters
start_dm = str2double(get(handles.brute_start_dm_edit, 'String'));
dm_step  = str2double(get(handles.brute_dm_step_edit, 'String'));
num_dms  = int32(str2double(get(handles.brute_num_dms_edit, 'String')));
params   = getappdata(handles.main, 'observation_parameters');

% Make sure we have dedispersed data
dedisped_data = getappdata(handles.main, 'dedispersed_series');
thresh        = str2double(get(handles.detection_threshold, 'String'));

% Apply median filter if required
if get(handles.median_filter_checkbox, 'Value') == 1.0
    bins = str2num(get(handles.median_filter_nbins, 'String'));
    
    % Apply median to each dedispersed time series
    for i = 1 : size(dedisped_data, 1)
        dedisped_data(i,:) = medfilt1(dedisped_data(i,:), bins);
    end
end

% Create image
save test_data.dat dedisped_data;

% Calculate sum and stddev for all dedisperd power series
mean   = mean2(dedisped_data);
stddev = std2(dedisped_data);

% Apply threshold
[dm, time] = find(dedisped_data > mean + stddev * thresh);
vals       = dedisped_data(dedisped_data > mean + stddev * thresh);
vals       = (vals - mean) / stddev;
dm         = start_dm + (dm - 1) .* dm_step;
time       = time .* params.sampling_time;

if get(handles.thresh_3d_checkbox, 'Value') == 1.0
    % Display 3D scatter plot with results
    statusbar(handles.main, 'Generating 3D plot');
    arrayfun(@cla,findall(0,'type','axes'))
    set(handles.axes3, 'Visible', 'off');
    set(handles.axes2, 'Visible', 'on');
    axes(handles.axes2);
    scatter3(time, dm, vals, '+');
    xlabel('Time (s)');
    ylabel('DM');
    zlabel('SNR')
else
    % Display Time vs DM plot
    statusbar(handles.main, 'Generating 2D plots');
    set(handles.axes2, 'Visible', 'on');
    axes(handles.axes2);
    scatter(time, dm, exp(log10((vals - min(vals) * 0.99))).^3);
    title('Time vs DM plot');
    xlabel('Time (s)');
    ylabel('DM');
    
    % Display DM vs SNR plot
    set(handles.axes3, 'Visible', 'on');
    axes(handles.axes3);
    scatter(dm, vals, '+');
    title('SNR vs DM plot');
    xlabel('DM');
    ylabel('SNR')
end

statusbar(handles.main, '');

% --- Executes on button press in thresh_3d_checkbox.
function thresh_3d_checkbox_Callback(hObject, eventdata, handles)

apply_threshold_button_Callback(hObject, eventdata, handles);
